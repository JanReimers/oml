Disconnect HEAD in git
Just do this:

git checkout master
Or, if you have changes that you want to keep, do this:

git checkout -b temp
git checkout -B master temp

||=== Build: Release in oml (compiler: GNU GCC Compiler) ===|
||=== Build: Release in omlUnitTests (compiler: GNU GCC Compiler) ===|
../oml/indexable.h||In instantiation of ‘
static T MinMax<T, A, Op, M, D, S>::apply(
const Indexable<T, A, M, D, S>&) [with T = double; A = DMatrix<double>; Op = OpGT<double>; Store M = Full; Data D = Real; Shape S = MatrixShape]’:|



../oml/indexable.h|470|required from ‘T Max(const Indexable<T, A, M, D, S>&) [with T = double; A = DMatrix<double>; Store M = Full; Data D = Real; Shape S = MatrixShape]’|
/home/janr/Code/TensorNetworks/oml/UnitTests/MatrixTests.cc|357|required from here|
../oml/indexable.h|48|error: ‘begin’ was not declared in this scope; did you mean ‘std::begin’?|
/usr/include/c++/9/bits/range_access.h|105|note: ‘std::begin’ declared here|
../oml/indexable.h|48|error: ‘end’ was not declared in this scope; did you mean ‘std::end’?|
/usr/include/c++/9/bits/range_access.h|107|note: ‘std::end’ declared here|
../oml/indexable.h||In instantiation of ‘static T MinMax<T, A, Op, M, D, S>::apply(const Indexable<T, A, M, D, S>&) [with T = double; A = DMatrix<double>; Op = OpLT<double>; Store M = Full; Data D = Real; Shape S = MatrixShape]’:|
../oml/indexable.h|465|required from ‘T Min(const Indexable<T, A, M, D, S>&) [with T = double; A = DMatrix<double>; Store M = Full; Data D = Real; Shape S = MatrixShape]’|
/home/janr/Code/TensorNetworks/oml/UnitTests/MatrixTests.cc|358|required from here|
../oml/indexable.h|48|error: ‘begin’ was not declared in this scope; did you mean ‘std::begin’?|
/usr/include/c++/9/bits/range_access.h|105|note: ‘std::begin’ declared here|
../oml/indexable.h|48|error: ‘end’ was not declared in this scope; did you mean ‘std::end’?|
/usr/include/c++/9/bits/range_access.h|107|note: ‘std::end’ declared here|
../oml/indexable.h||In instantiation of ‘static T MinMax<T, A, Op, M, D, S>::apply(const Indexable<T, A, M, D, S>&) [with T = double; A = Xpr<double, XprUnaryLambda<double, double, Ref<double, Indexable<double, Xpr<double, XprBinaryLambda<double, double, double, Ref<double, Indexable<double, DMatrix<double>, Full, Real, MatrixShape>, MatrixShape>, Ref<double, Indexable<double, DMatrix<double>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>; Op = OpGT<double>; Store M = Full; Data D = Real; Shape S = MatrixShape]’:|
../oml/indexable.h|470|required from ‘T Max(const Indexable<T, A, M, D, S>&) [with T = double; A = Xpr<double, XprUnaryLambda<double, double, Ref<double, Indexable<double, Xpr<double, XprBinaryLambda<double, double, double, Ref<double, Indexable<double, DMatrix<double>, Full, Real, MatrixShape>, MatrixShape>, Ref<double, Indexable<double, DMatrix<double>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>; Store M = Full; Data D = Real; Shape S = MatrixShape]’|
/home/janr/Code/TensorNetworks/oml/UnitTests/MatrixTests.cc|288|required from ‘void gtest_suite_MatrixTests_::AsciiAndBinaryIO<gtest_TypeParam_>::TestBody() [with gtest_TypeParam_ = double]’|
/home/janr/Code/TensorNetworks/oml/UnitTests/MatrixTests.cc|272|required from here|
../oml/indexable.h|48|error: ‘begin’ was not declared in this scope; did you mean ‘std::begin’?|
/usr/include/c++/9/bits/range_access.h|105|note: ‘std::begin’ declared here|
../oml/indexable.h|48|error: ‘end’ was not declared in this scope; did you mean ‘std::end’?|
/usr/include/c++/9/bits/range_access.h|107|note: ‘std::end’ declared here|
../oml/indexable.h||In instantiation of ‘static T MinMax<T, A, Op, M, D, S>::apply(const Indexable<T, A, M, D, S>&) [with T = double; A = Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>; Op = OpGT<double>; Store M = Full; Data D = Real; Shape S = MatrixShape]’:|
../oml/indexable.h|470|required from ‘T Max(const Indexable<T, A, M, D, S>&) [with T = double; A = Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>; Store M = Full; Data D = Real; Shape S = MatrixShape]’|
/home/janr/Code/TensorNetworks/oml/UnitTests/MatrixTests.cc|288|required from ‘void gtest_suite_MatrixTests_::AsciiAndBinaryIO<gtest_TypeParam_>::TestBody() [with gtest_TypeParam_ = std::complex<double>]’|
/home/janr/Code/TensorNetworks/oml/UnitTests/MatrixTests.cc|272|required from here|
../oml/indexable.h|48|error: no matching function for call to ‘begin(const Indexable<double, Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>&)’|
/usr/include/c++/9/initializer_list|89|note: candidate: ‘template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)’|
/usr/include/c++/9/initializer_list|89|note:   template argument deduction/substitution failed:|
../oml/indexable.h|48|note:   ‘Indexable<double, Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>’ is not derived from ‘std::initializer_list<_Tp>’|
/usr/include/c++/9/bits/range_access.h|48|note: candidate: ‘template<class _Container> constexpr decltype (__cont.begin()) std::begin(_Container&)’|
/usr/include/c++/9/bits/range_access.h|48|note:   template argument deduction/substitution failed:|
../oml/indexable.h|48|required from ‘static T MinMax<T, A, Op, M, D, S>::apply(const Indexable<T, A, M, D, S>&) [with T = double; A = Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>; Op = OpGT<double>; Store M = Full; Data D = Real; Shape S = MatrixShape]’|
../oml/indexable.h|470|required from ‘T Max(const Indexable<T, A, M, D, S>&) [with T = double; A = Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>; Store M = Full; Data D = Real; Shape S = MatrixShape]’|
/home/janr/Code/TensorNetworks/oml/UnitTests/MatrixTests.cc|288|required from ‘void gtest_suite_MatrixTests_::AsciiAndBinaryIO<gtest_TypeParam_>::TestBody() [with gtest_TypeParam_ = std::complex<double>]’|
/home/janr/Code/TensorNetworks/oml/UnitTests/MatrixTests.cc|272|required from here|
/usr/include/c++/9/bits/range_access.h|48|error: ‘const class Indexable<double, Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>’ has no member named ‘begin’|
../oml/indexable.h||In instantiation of ‘static T MinMax<T, A, Op, M, D, S>::apply(const Indexable<T, A, M, D, S>&) [with T = double; A = Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>; Op = OpGT<double>; Store M = Full; Data D = Real; Shape S = MatrixShape]’:|
../oml/indexable.h|470|required from ‘T Max(const Indexable<T, A, M, D, S>&) [with T = double; A = Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>; Store M = Full; Data D = Real; Shape S = MatrixShape]’|
/home/janr/Code/TensorNetworks/oml/UnitTests/MatrixTests.cc|288|required from ‘void gtest_suite_MatrixTests_::AsciiAndBinaryIO<gtest_TypeParam_>::TestBody() [with gtest_TypeParam_ = std::complex<double>]’|
/home/janr/Code/TensorNetworks/oml/UnitTests/MatrixTests.cc|272|required from here|
/usr/include/c++/9/bits/range_access.h|58|note: candidate: ‘template<class _Container> constexpr decltype (__cont.begin()) std::begin(const _Container&)’|
/usr/include/c++/9/bits/range_access.h|58|note:   template argument deduction/substitution failed:|
../oml/indexable.h|48|required from ‘static T MinMax<T, A, Op, M, D, S>::apply(const Indexable<T, A, M, D, S>&) [with T = double; A = Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>; Op = OpGT<double>; Store M = Full; Data D = Real; Shape S = MatrixShape]’|
../oml/indexable.h|470|required from ‘T Max(const Indexable<T, A, M, D, S>&) [with T = double; A = Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>; Store M = Full; Data D = Real; Shape S = MatrixShape]’|
/home/janr/Code/TensorNetworks/oml/UnitTests/MatrixTests.cc|288|required from ‘void gtest_suite_MatrixTests_::AsciiAndBinaryIO<gtest_TypeParam_>::TestBody() [with gtest_TypeParam_ = std::complex<double>]’|
/home/janr/Code/TensorNetworks/oml/UnitTests/MatrixTests.cc|272|required from here|
/usr/include/c++/9/bits/range_access.h|58|error: ‘const class Indexable<double, Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>’ has no member named ‘begin’|
../oml/indexable.h||In instantiation of ‘static T MinMax<T, A, Op, M, D, S>::apply(const Indexable<T, A, M, D, S>&) [with T = double; A = Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>; Op = OpGT<double>; Store M = Full; Data D = Real; Shape S = MatrixShape]’:|
../oml/indexable.h|470|required from ‘T Max(const Indexable<T, A, M, D, S>&) [with T = double; A = Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>; Store M = Full; Data D = Real; Shape S = MatrixShape]’|
/home/janr/Code/TensorNetworks/oml/UnitTests/MatrixTests.cc|288|required from ‘void gtest_suite_MatrixTests_::AsciiAndBinaryIO<gtest_TypeParam_>::TestBody() [with gtest_TypeParam_ = std::complex<double>]’|
/home/janr/Code/TensorNetworks/oml/UnitTests/MatrixTests.cc|272|required from here|
/usr/include/c++/9/bits/range_access.h|87|note: candidate: ‘template<class _Tp, long unsigned int _Nm> constexpr _Tp* std::begin(_Tp (&)[_Nm])’|
/usr/include/c++/9/bits/range_access.h|87|note:   template argument deduction/substitution failed:|
../oml/indexable.h|48|note:   mismatched types ‘_Tp [_Nm]’ and ‘const Indexable<double, Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>’|
/usr/include/c++/9/bits/range_access.h|104|note: candidate: ‘template<class _Tp> _Tp* std::begin(std::valarray<_Tp>&)’|
/usr/include/c++/9/bits/range_access.h|104|note:   template argument deduction/substitution failed:|
../oml/indexable.h|48|note:   types ‘std::valarray<_Tp>’ and ‘const Indexable<double, Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>’ have incompatible cv-qualifiers|
/usr/include/c++/9/bits/range_access.h|105|note: candidate: ‘template<class _Tp> const _Tp* std::begin(const std::valarray<_Tp>&)’|
/usr/include/c++/9/bits/range_access.h|105|note:   template argument deduction/substitution failed:|
../oml/indexable.h|48|note:   ‘const Indexable<double, Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>’ is not derived from ‘const std::valarray<_Tp>’|
../oml/indexable.h|48|error: no matching function for call to ‘end(const Indexable<double, Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>&)’|
/usr/include/c++/9/initializer_list|99|note: candidate: ‘template<class _Tp> constexpr const _Tp* std::end(std::initializer_list<_Tp>)’|
/usr/include/c++/9/initializer_list|99|note:   template argument deduction/substitution failed:|
../oml/indexable.h|48|note:   ‘Indexable<double, Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>’ is not derived from ‘std::initializer_list<_Tp>’|
/usr/include/c++/9/bits/range_access.h|68|note: candidate: ‘template<class _Container> constexpr decltype (__cont.end()) std::end(_Container&)’|
/usr/include/c++/9/bits/range_access.h|68|note:   template argument deduction/substitution failed:|
../oml/indexable.h|48|required from ‘static T MinMax<T, A, Op, M, D, S>::apply(const Indexable<T, A, M, D, S>&) [with T = double; A = Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>; Op = OpGT<double>; Store M = Full; Data D = Real; Shape S = MatrixShape]’|
../oml/indexable.h|470|required from ‘T Max(const Indexable<T, A, M, D, S>&) [with T = double; A = Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>; Store M = Full; Data D = Real; Shape S = MatrixShape]’|
/home/janr/Code/TensorNetworks/oml/UnitTests/MatrixTests.cc|288|required from ‘void gtest_suite_MatrixTests_::AsciiAndBinaryIO<gtest_TypeParam_>::TestBody() [with gtest_TypeParam_ = std::complex<double>]’|
/home/janr/Code/TensorNetworks/oml/UnitTests/MatrixTests.cc|272|required from here|
/usr/include/c++/9/bits/range_access.h|68|error: ‘const class Indexable<double, Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>’ has no member named ‘end’|
../oml/indexable.h||In instantiation of ‘static T MinMax<T, A, Op, M, D, S>::apply(const Indexable<T, A, M, D, S>&) [with T = double; A = Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>; Op = OpGT<double>; Store M = Full; Data D = Real; Shape S = MatrixShape]’:|
../oml/indexable.h|470|required from ‘T Max(const Indexable<T, A, M, D, S>&) [with T = double; A = Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>; Store M = Full; Data D = Real; Shape S = MatrixShape]’|
/home/janr/Code/TensorNetworks/oml/UnitTests/MatrixTests.cc|288|required from ‘void gtest_suite_MatrixTests_::AsciiAndBinaryIO<gtest_TypeParam_>::TestBody() [with gtest_TypeParam_ = std::complex<double>]’|
/home/janr/Code/TensorNetworks/oml/UnitTests/MatrixTests.cc|272|required from here|
/usr/include/c++/9/bits/range_access.h|78|note: candidate: ‘template<class _Container> constexpr decltype (__cont.end()) std::end(const _Container&)’|
/usr/include/c++/9/bits/range_access.h|78|note:   template argument deduction/substitution failed:|
../oml/indexable.h|48|required from ‘static T MinMax<T, A, Op, M, D, S>::apply(const Indexable<T, A, M, D, S>&) [with T = double; A = Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>; Op = OpGT<double>; Store M = Full; Data D = Real; Shape S = MatrixShape]’|
../oml/indexable.h|470|required from ‘T Max(const Indexable<T, A, M, D, S>&) [with T = double; A = Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>; Store M = Full; Data D = Real; Shape S = MatrixShape]’|
/home/janr/Code/TensorNetworks/oml/UnitTests/MatrixTests.cc|288|required from ‘void gtest_suite_MatrixTests_::AsciiAndBinaryIO<gtest_TypeParam_>::TestBody() [with gtest_TypeParam_ = std::complex<double>]’|
/home/janr/Code/TensorNetworks/oml/UnitTests/MatrixTests.cc|272|required from here|
/usr/include/c++/9/bits/range_access.h|78|error: ‘const class Indexable<double, Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>’ has no member named ‘end’|
../oml/indexable.h||In instantiation of ‘static T MinMax<T, A, Op, M, D, S>::apply(const Indexable<T, A, M, D, S>&) [with T = double; A = Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>; Op = OpGT<double>; Store M = Full; Data D = Real; Shape S = MatrixShape]’:|
../oml/indexable.h|470|required from ‘T Max(const Indexable<T, A, M, D, S>&) [with T = double; A = Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>; Store M = Full; Data D = Real; Shape S = MatrixShape]’|
/home/janr/Code/TensorNetworks/oml/UnitTests/MatrixTests.cc|288|required from ‘void gtest_suite_MatrixTests_::AsciiAndBinaryIO<gtest_TypeParam_>::TestBody() [with gtest_TypeParam_ = std::complex<double>]’|
/home/janr/Code/TensorNetworks/oml/UnitTests/MatrixTests.cc|272|required from here|
/usr/include/c++/9/bits/range_access.h|97|note: candidate: ‘template<class _Tp, long unsigned int _Nm> constexpr _Tp* std::end(_Tp (&)[_Nm])’|
/usr/include/c++/9/bits/range_access.h|97|note:   template argument deduction/substitution failed:|
../oml/indexable.h|48|note:   mismatched types ‘_Tp [_Nm]’ and ‘const Indexable<double, Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>’|
/usr/include/c++/9/bits/range_access.h|106|note: candidate: ‘template<class _Tp> _Tp* std::end(std::valarray<_Tp>&)’|
/usr/include/c++/9/bits/range_access.h|106|note:   template argument deduction/substitution failed:|
../oml/indexable.h|48|note:   types ‘std::valarray<_Tp>’ and ‘const Indexable<double, Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>’ have incompatible cv-qualifiers|
/usr/include/c++/9/bits/range_access.h|107|note: candidate: ‘template<class _Tp> const _Tp* std::end(const std::valarray<_Tp>&)’|
/usr/include/c++/9/bits/range_access.h|107|note:   template argument deduction/substitution failed:|
../oml/indexable.h|48|note:   ‘const Indexable<double, Xpr<double, XprUnaryLambda<std::complex<double>, double, Ref<std::complex<double>, Indexable<std::complex<double>, Xpr<std::complex<double>, XprBinaryLambda<std::complex<double>, std::complex<double>, std::complex<double>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, Ref<std::complex<double>, Indexable<std::complex<double>, DMatrix<std::complex<double> >, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>, MatrixShape>, MatrixShape>, Full, Real, MatrixShape>, Full, Real, MatrixShape>’ is not derived from ‘const std::valarray<_Tp>’|
||=== Build failed: 12 error(s), 46 warning(s) (0 minute(s), 6 second(s)) ===|

